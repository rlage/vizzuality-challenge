{"version":3,"file":"static/webpack/static/development/pages/index.js.218930462f56a4f76cc2.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Chart } from '../components/Chart';\nimport Headline from '../components/Headline';\nimport Basic from '../components/Basic';\nimport Gradient from '../components/Gradient';\nimport Choropleth from '../components/Choropleth';\nimport { useChartDimensions } from '../components/utils';\nimport styles from './index.module.css'\nimport InfoModal from '../components/InfoModal/InfoModal';\n\nconst Index = () => {\n  const [data, setData] = useState(null);\n  const [showCharts, setShowCharts] = useState(null);\n  useEffect(() => {\n    async function fetchData() {\n      const result = await axios(\n        'https://raw.githubusercontent.com/Vizzuality/front-end-code-challenge/master/data.json',\n      );\n      let dataObject = {};\n      result.data.forEach(d => d.type !== 'timeline' ? dataObject[d.type] = d : null)\n      setData(dataObject);\n      const defaultShowCharts = Object.keys(dataObject).reduce((acc, item) => {\n        return {\n          ...acc,\n          [item]: true,\n        }\n      },{})\n      setShowCharts(defaultShowCharts);\n    }\n    fetchData();\n  }, []);\n\n  const [ref, dimensions] = useChartDimensions();\n  const [showModal, setShowModal] = useState({\n    'layer': null,\n    'display': false,\n  });\n  const updateShowModal = (name) => {\n    setShowModal(\n      {\n        'layer': name,\n        'display': !showModal.display,\n      }\n    )\n  }\n\n  const updateShowCharts = (name) => {\n    setShowCharts({\n      ...showCharts,\n      [name]: !showCharts[name]\n    })\n  }\n\n  const getChart = (name, item) => {\n    switch(name) {\n      case \"basic\":\n        return (\n          <Basic data={item} />\n        )\n      case \"gradient\":\n        return (\n          <Gradient data={item} />\n        )\n      case \"choropleth\":\n        return (\n          <Basic data={item} />\n      )\n    }\n  }\n  \n  return (\n    <div className={styles.app} ref={ref}>\n      {data && showCharts ? \n        <>\n          {\n            Object.keys(data).map((item) => {\n              console.log(item);\n              console.log(data[item]);\n              return (\n                <Headline\n                  data={data[item]}\n                  setShowModal={updateShowModal}\n                  setShowCharts={updateShowCharts}\n                >\n                  {\n                    showCharts[data[item].type] ?\n                    <Chart cssClass={item} dimensions={dimensions}>\n                      {getChart(item, data[item])}\n                    </Chart>\n                    :\n                    null\n                  }\n                </Headline>\n              )\n            })\n          }\n          {/* <Headline data={data.basic} setShowModal={updateShowModal} setShowCharts={updateShowCharts}>\n            {\n              showCharts[data.basic.type] ?\n              <Chart cssClass='basic' dimensions={dimensions}>\n                <Basic data={data.basic} />\n              </Chart>\n              :\n              null\n            }\n          </Headline>\n          <Headline data={data.gradient} setShowModal={updateShowModal} setShowCharts={updateShowCharts}>\n            {\n              showCharts[data.gradient.type] ?\n              <Chart cssClass='gradient' dimensions={dimensions}>\n                <Gradient data={data.gradient} width={dimensions.boundedWidth}/>\n              </Chart>\n              :\n              null\n            }\n          </Headline>\n          <Headline data={data.choropleth} setShowModal={updateShowModal} setShowCharts={updateShowCharts}>\n            {\n              showCharts[data.choropleth.type] ?\n              <Chart cssClass='choropleth' dimensions={dimensions}>\n                <Choropleth data={data.choropleth} width={dimensions.boundedWidth}/>\n              </Chart>\n              :\n              null\n            }\n          </Headline> */}\n          {\n            showModal.display ? \n            <InfoModal content={data[showModal.layer].description} display={showModal.display} setShowModal={updateShowModal} />\n            :\n            null\n          }\n          \n        </>\n        :\n        null\n      }\n    </div>\n  );\n}\n\nexport default Index;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AACA;AACA;AArBA;AAAA;AAAA;AAAA;AACA;AADA;AAwBA;AACA;AAFA;AAvBA;AAAA;AACA;AA0BA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAXA;AAcA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAkCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;;;;A","sourceRoot":""}